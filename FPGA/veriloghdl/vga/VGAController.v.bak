module VGAController (
    input           pclk,       // Pixel Clock (requer PLL para 25.175MHz)
    input           reset,
    input   [7:0]   pixel_data, // Dados do pixel vindo da RAM
    output          h_sync,
    output          v_sync,
    output          video_on,   // Para VGA_BLANK_N
    output          vga_clk,    // Clock de saída para o DAC
    output  [15:0]  read_addr   // Endereço para ler da RAM
);
    // Parâmetros de temporização para 640x480 @ 60Hz
    localparam H_DISPLAY=640, H_FP=16, H_SP=96, H_BP=48, H_TOTAL=800;
    localparam V_DISPLAY=480, V_FP=10, V_SP=2,  V_BP=33, V_TOTAL=525;
    
    reg [9:0] h_count, v_count;
    
    // Contadores horizontal e vertical
    always @(posedge pclk or posedge reset) begin
        if (reset) begin
            h_count <= 0; v_count <= 0;
        end else begin
            if (h_count < H_TOTAL - 1) h_count <= h_count + 1;
            else begin
                h_count <= 0;
                if (v_count < V_TOTAL - 1) v_count <= v_count + 1;
                else v_count <= 0;
            end
        end
    end

    // Geração dos sinais de sincronismo (ativos baixo)
    assign h_sync = !((h_count >= H_DISPLAY + H_FP) && (h_count < H_DISPLAY + H_FP + H_SP));
    assign v_sync = !((v_count >= V_DISPLAY + V_FP) && (v_count < V_DISPLAY + V_FP + V_SP));

    // Sinal que indica área visível da tela
    assign video_on = (h_count < H_DISPLAY) && (v_count < V_DISPLAY);
    
    // Centraliza a imagem de 320x240 na tela de 640x480
    localparam H_OFFSET = (H_DISPLAY - 320) / 2;
    localparam V_OFFSET = (V_DISPLAY - 240) / 2;

    wire is_image_area = (h_count >= H_OFFSET) && (h_count < H_OFFSET + 320) &&
                         (v_count >= V_OFFSET) && (v_count < V_OFFSET + 240);

    // O endereço de leitura só é calculado para a área da imagem
    assign read_addr = is_image_area ? ((v_count - V_OFFSET) * 320) + (h_count - H_OFFSET) : 0;
    
    // A porta vga_clk repassa o clock do pixel para o chip DAC externo
    assign vga_clk = pclk;

endmodule